// Jagadeesh Vasudevamurthy nes_zybo_wrapper_X99.v
// Please do not remove the header
// Char array passed is as follows
//--------------------------------------
//0:000000 01101101
//1:000001 00100010
//2:000010 00000010
//3:000011 01000010
//4:000100 10000001
//5:000101 10100000
//6:000110 10100000
//7:000111 01100000
//8:001000 01000100
//9:001001 00001000
//10:001010 00001000
//11:001011 00000100
//12:001100 00000101
//13:001101 00000000
//14:001110 00000000
//15:001111 00000000
//16:010000 10110110
//17:010001 00001111
//18:010010 00100111
//19:010011 10000011
//20:010100 10100010
//21:010101 11100001
//22:010110 11000100
//23:010111 11001000
//24:011000 10001100
//25:011001 00010000
//26:011010 00010100
//27:011011 00010000
//28:011100 00010010
//29:011101 00000000
//30:011110 00000000
//31:011111 00000000
//32:100000 11111111
//33:100001 00110111
//34:100010 01010011
//35:100011 10110011
//36:100100 11101111
//37:100101 11101110
//38:100110 11101101
//39:100111 11110000
//40:101000 11110100
//41:101001 10011000
//42:101010 01011001
//43:101011 01011110
//44:101100 00011111
//45:101101 00000000
//46:101110 00000000
//47:101111 00000000
//48:110000 11111111
//49:110001 10111111
//50:110010 11011011
//51:110011 11011011
//52:110100 11111011
//53:110101 11111011
//54:110110 11110110
//55:110111 11111010
//56:111000 11111110
//57:111001 11111110
//58:111010 10111110
//59:111011 10111111
//60:111100 10011111
//61:111101 00000000
//62:111110 00000000
//63:111111 00000000
// default NOT given
// Parallel mux
//--------------------------------------
// PLA starts now
module nes_zybo_wrapper_X99(a,o);
	input[5:0]  a;
	output reg[7:0]  o;
	always @(a)
	begin
		case(a)
			6'b000000: o = 8'b01101101;
			6'b000001: o = 8'b00100010;
			6'b000010: o = 8'b00000010;
			6'b000011: o = 8'b01000010;
			6'b000100: o = 8'b10000001;
			6'b000101: o = 8'b10100000;
			6'b000110: o = 8'b10100000;
			6'b000111: o = 8'b01100000;
			6'b001000: o = 8'b01000100;
			6'b001001: o = 8'b00001000;
			6'b001010: o = 8'b00001000;
			6'b001011: o = 8'b00000100;
			6'b001100: o = 8'b00000101;
			6'b001101: o = 8'b00000000;
			6'b001110: o = 8'b00000000;
			6'b001111: o = 8'b00000000;
			6'b010000: o = 8'b10110110;
			6'b010001: o = 8'b00001111;
			6'b010010: o = 8'b00100111;
			6'b010011: o = 8'b10000011;
			6'b010100: o = 8'b10100010;
			6'b010101: o = 8'b11100001;
			6'b010110: o = 8'b11000100;
			6'b010111: o = 8'b11001000;
			6'b011000: o = 8'b10001100;
			6'b011001: o = 8'b00010000;
			6'b011010: o = 8'b00010100;
			6'b011011: o = 8'b00010000;
			6'b011100: o = 8'b00010010;
			6'b011101: o = 8'b00000000;
			6'b011110: o = 8'b00000000;
			6'b011111: o = 8'b00000000;
			6'b100000: o = 8'b11111111;
			6'b100001: o = 8'b00110111;
			6'b100010: o = 8'b01010011;
			6'b100011: o = 8'b10110011;
			6'b100100: o = 8'b11101111;
			6'b100101: o = 8'b11101110;
			6'b100110: o = 8'b11101101;
			6'b100111: o = 8'b11110000;
			6'b101000: o = 8'b11110100;
			6'b101001: o = 8'b10011000;
			6'b101010: o = 8'b01011001;
			6'b101011: o = 8'b01011110;
			6'b101100: o = 8'b00011111;
			6'b101101: o = 8'b00000000;
			6'b101110: o = 8'b00000000;
			6'b101111: o = 8'b00000000;
			6'b110000: o = 8'b11111111;
			6'b110001: o = 8'b10111111;
			6'b110010: o = 8'b11011011;
			6'b110011: o = 8'b11011011;
			6'b110100: o = 8'b11111011;
			6'b110101: o = 8'b11111011;
			6'b110110: o = 8'b11110110;
			6'b110111: o = 8'b11111010;
			6'b111000: o = 8'b11111110;
			6'b111001: o = 8'b11111110;
			6'b111010: o = 8'b10111110;
			6'b111011: o = 8'b10111111;
			6'b111100: o = 8'b10011111;
			6'b111101: o = 8'b00000000;
			6'b111110: o = 8'b00000000;
			6'b111111: o = 8'b00000000;
// defaults of ALL_0 and ALL_X are never routine to input pla. ALL_X,ALL_1 are expanded by me. Output never has default
//			 Parallel mux
		endcase
	end
endmodule
